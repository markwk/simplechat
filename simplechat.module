<?php

require_once dirname(__FILE__) . '/simplechat.theme.inc';
require_once dirname(__FILE__) . '/simplechat.form.inc';

/**
 * @file
 * Simple Chat: Realtime Nodejs Chat Field
 */

/**
 * Implements hook_field_info().
 *
 * Provides the description of the field.
 */
function simplechat_field_info() {
  return array(    
    'simplechat_app' => array(
      'label' => t('Simple Chat'),
      'description' => t('Provides the option for adding a chat to a node.'),
      'instance_settings' => array(
        'show_simplechat' => true,
      ),
      'default_widget' => 'simplechat_widget',
      'default_formatter'  => 'simplechat_default',
    ),
  );
}

/**
 * Implements hook_field_is_empty().
 */
function simplechat_field_is_empty($item, $field) {
  return FALSE;
}

/**
 * Implements hook_field_formatter_info().
 *
 */
function simplechat_field_formatter_info() {
  return array(
    'simplechat_default' => array(
      'label' => t('Default'),
      'field types' => array('simplechat_app'),
       'multiple values'=> FIELD_BEHAVIOR_DEFAULT,
    ),
  );
}
/**
 * Implements hook_field_formatter_view().
 *
 */
function simplechat_field_formatter_view($obj_type, $object, $field, $instance, $langcode, $items, $display) {
    $element = array();
    if(!$items[0]['show_simplechat']){
	
	// $form = drupal_get_form('simplechat_enable', $object->nid);
	$element = array(
	    '#theme' => 'simplechat_disabled',
	    // '#element' => $form
	);
	return $element;
    }
    
    drupal_add_js(array('simplechat' => array('nid' => $object->nid)), 'setting');

    switch ($display['type']) {
	case 'simplechat_default':
	    global $user;
	    $nid = arg(1);
	    // simplechat_chat_insert($node)
        // Add User to socket.io channel for this chat
	    nodejs_add_user_to_channel($user->uid, 'simplechat_' . $nid);
	    foreach ($items as $delta => $item) {
		$element[$delta] = array(
		    '#theme' => 'simplechat_default',
		);
	    }
	    $simplechat_path = drupal_get_path('module', 'simplechat');
	    $element['#attached'] = array(
		'js' => array(
		    $simplechat_path . '/simplechat.js',
		),
	    );
	    break;
    }
    return $element;
}

/**
 * Implements hook_field_widget_info().
 * @see simplechat_field_widget_form()
 */
function simplechat_field_widget_info() {
  return array(
    'simplechat_widget' => array(
      'label' => t('Simplechat'),
      'field types' => array('simplechat_app'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 *
*/
function simplechat_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
    if ($instance['widget']['type'] == 'simplechat_widget')
        {
      $element['show_simplechat'] = array(
      '#type' => 'checkbox',
      '#default_value' => isset($items[$delta]['show_simplechat']) ? $items[$delta]['show_simplechat'] : FALSE,
      '#title' => t('Show simplechat with this Node'),
      );
      // TODO: set this max to limit according to global max users
		$element['max_users'] = array(
	      '#type' => 'select',
	      '#options' => drupal_map_assoc(range(2, 1000)),
	      '#default_value' => isset($items[$delta]['max_users']) ? $items[$delta]['max_users'] : 1000,	      
	      '#title' => t('Maximum Number of Users for this Chat'),
	       );
      $element['previous_messages_display_count'] = array(
      '#type' => 'select',
      '#options' => drupal_map_assoc(range(2, 20)),
      '#display' => drupal_map_assoc(range(2, 20)),
	  '#default_value' => isset($items[$delta]['previous_messages_display_count']) ? $items[$delta]['previous_messages_display_count'] : 20,	  
      '#title' => t('Number of previous messages to display'),
       );
/*
      $element['is_archived'] = array(
      '#type' => 'checkbox',
      '#default_value' => isset($items[$delta]['is_archived']) ? $items[$delta]['is_archived'] : FALSE,
      '#title' => t('Archive this chat?'),
       );
      $element['when_archived'] = array(
      '#type' => 'textfield',
      '#title' => t('Show simplechat with this Node'),
       );
*/
         }
  return $element;
}

/**
 * Implementation of hook_permission()
 */
function simplechat_permission() {
  return array(
    'administer simplechat' => array(
    'title' => 'Administer simplechat',
    'description' => 'Perform administrative tasks on simplechat App module.',
    ),
	'add simplechat field' => array(
    'title' => 'Add simplechat in field',
    'description' => 'Add simplechat App in field when creating a node.',
    ),
	'access simplechat' => array(
    'title' => 'Access simplechat',
    'description' => 'Access simplechat.',
    ),
  );
}

/**
 * Implementation of hook_menu()
 */
function simplechat_menu() {
  $items = array();

  $items['admin/config/media/simplechat'] = array(
    'title' => 'Simplechat',
    'description' => 'Configuration for the Simplechat module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('simplechat_admin_settings'),
    'access arguments' => array('administer simplechat'),
    'file' => 'simplechat.admin.inc',
	'file path' => drupal_get_path('module', 'simplechat'),
  );
  $items['simplechat/chat/post/message/%node/%'] = array(
    'page callback' => 'simplechat_chat_post_message',
    'page arguments' => array(4, 5),
    'access arguments' => array('send chat messages'),
    'type' => MENU_CALLBACK,
  );
  $items['simplechat/chat/get/latest/messages/%node/%'] = array(
    'page callback' => 'simplechat_chat_get_latest_messages',
    'page arguments' => array(5, 6),
    'access arguments' => array('access chat rooms'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_nodejs_handlers_info().
 */
function simplechat_nodejs_handlers_info() {
  return array(
    drupal_get_path('module', 'simplechat') . '/simplechat_nodejs.js',
  );
}

