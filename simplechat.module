<?php
/**
 * @file
 * Simple Chat: Realtime Nodejs Chat Field
 */

/**
 * Implements hook_field_info().
 *
 * Provides the description of the field.
 */
function simplechat_field_info() {
  return array(    
    'simplechat_app' => array(
      'label' => t('Simple Chat'),
      'description' => t('Provides the option for adding a chat to a node.'),
      'instance_settings' => array(
        'show_board' => true,
      ),
      'default_widget' => 'simplechat_widget',
      'default_formatter'  => 'simplechat_default',
    ),
  );
}

/**
 * Implements hook_field_is_empty().
 */
function simplechat_field_is_empty($item, $field) {
  return FALSE;
}

/**
 * Implements hook_field_formatter_info().
 *
 */
function simplechat_field_formatter_info() {
  return array(
    'simplechat_default' => array(
      'label' => t('Default'),
      'field types' => array('simplechat_app'),
       'multiple values'=> FIELD_BEHAVIOR_DEFAULT,
    ),
  );
}
/**
 * Implements hook_field_formatter_view().
 *
 */
function simplechat_field_formatter_view($obj_type, $object, $field, $instance, $langcode, $items, $display) {
    $element = array();
    if(!$items[0]['show_board']){
	
	$form = drupal_get_form('simplechat_enable', $object->nid);
	$element = array(
	    '#theme' => 'simplechat_disabled',
	    '#element' => $form
	);
	return $element;
    }
    
    drupal_add_js(array('simplechat' => array('nid' => $object->nid)), 'setting');

    switch ($display['type']) {
	case 'simplechat_default':
	    global $user;
	    $nid = arg(1);
        // Add User to socket.io channel for this chat
	    nodejs_add_user_to_channel($user->uid, 'simplechat_' . $nid);
	    foreach ($items as $delta => $item) {
		$element[$delta] = array(
		    '#theme' => 'simplechat_theme_simplechat_default',
		);
	    }
	    $simplechat_path = drupal_get_path('module', 'simplechat');
	    $element['#attached'] = array(
		'js' => array(
		    $simplechat_path . '/simplechat.js',
		),
	    );
	    break;
    }
    return $element;
}

/**
 * Implements hook_field_widget_info().
 * @see simplechat_field_widget_form()
 */
function simplechat_field_widget_info() {
  return array(
    'simplechat_widget' => array(
      'label' => t('Simplechat'),
      'field types' => array('simplechat_app'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 *
*/
function simplechat_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
    if ($instance['widget']['type'] == 'simplechat_widget')
        {
      $element['show_board'] = array(
      '#type' => 'checkbox',
      '#default_value' => isset($items[$delta]['show_board']) ? $items[$delta]['show_board'] : FALSE,
      '#title' => t('Show simplechat with this Node'),
      );
        }
  return $element;
}

/**
 * Implementation of hook_permission()
 */
function simplechat_permission() {
  return array(
    'administer simplechat' => array(
    'title' => 'Administer simplechat',
    'description' => 'Perform administrative tasks on simplechat App module.',
    ),
	'add simplechat field' => array(
    'title' => 'Add simplechat in field',
    'description' => 'Add simplechat App in field when creating a node.',
    ),
	'access simplechat' => array(
    'title' => 'Access simplechat',
    'description' => 'Access simplechat.',
    ),
  );
}

/**
 * Implementation of hook_menu()
 */
function simplechat_menu() {
  $items = array();

  $items['admin/config/media/simplechat'] = array(
    'title' => 'Simplechat',
    'description' => 'Configuration for the Simplechat module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('simplechat_admin_settings'),
    'access arguments' => array('administer simplechat'),
    'file' => 'simplechat.admin.inc',
	'file path' => drupal_get_path('module', 'simplechat'),
  );
 /* Need this? 
  $items['chatroom/chat/post/message/%node/%'] = array(
    'page callback' => 'chatroom_chat_post_message',
    'page arguments' => array(4, 5),
    'access arguments' => array('send chat messages'),
    'type' => MENU_CALLBACK,
  );
  $items['chatroom/chat/get/latest/messages/%node/%'] = array(
    'page callback' => 'chatroom_chat_get_latest_messages',
    'page arguments' => array(5, 6),
    'access arguments' => array('access chat rooms'),
    'type' => MENU_CALLBACK,
  );
*/
  return $items;
}

/**
 * Implements hook_theme().
 */
function simplechat_theme($existing, $type, $theme, $path) {
  return array(
	'simplechat_theme_simplechat_default' => array(
	    'variables' => array('element' => NULL),
	),
    'simplechat_disabled' => array(
	    'render element' => 'form',
	    'variables' => array('element' => NULL),
	    'template' => 'simplechat_disabled', 
	    'path' => drupal_get_path('module', 'simplechat') . '/templates',
	),
   );
}

/**
 * Implements theme().
 */
function theme_simplechat_theme_simplechat_default($element) {
  global $user; 
    $base_path=drupal_get_path('module','simplechat');     
    $simplechat_maxusers = variable_get('simplechat_maxusers', '20');

  return theme_render_template(drupal_get_path('module', 'simplechat') .'/templates/simplechat.tpl.php', array('simplechatjs' => $simplechatjs, 'simplechat_maxusers' => $simplechat_maxusers, ));
}

/**
 * Implements theme().
 */
function theme_simplechat_disabled($element) {
    $form['submit'] = array(
	'#type' => 'submit',
	'#value' => t('Enable whitebiard'),
	
    );
  return theme_render_template(drupal_get_path('module', 'simplechat') .'/templates/simplechat_disabled.tpl.php', array('form' => $form));
}

/**
 * Implements hook_nodejs_handlers_info().
 */
function simplechat_nodejs_handlers_info() {
  return array(
    drupal_get_path('module', 'simplechat') . '/simplechat_nodejs.js',
  );
}

/**
 * Implements hook_insert().
 */
/* Code for adding chat messages.
function simplechat_chat_insert($node) {
  cache_clear_all('chatroom_chat_list', 'cache');
  $chat = array(
    'nid' => $node->nid,
    'crid' => isset($node->chatroom_nid) ? $node->chatroom_nid : 0,
    'idle_freq' => isset($node->idle_freq) ? $node->idle_freq : 20,
    'max_users' => isset($node->max_users) ? $node->max_users : 0,
    'kicked_out_message' => isset($node->kicked_out_message) ? $node->kicked_out_message : '',
    'banned_message' => isset($node->banned_message) ? $node->banned_message : '',
    'module' => isset($node->module) ? $node->module : 'chatroom',
    'previous_messages_display_count' => isset($node->previous_messages_display_count) ? $node->previous_messages_display_count : 20,
    'private' => isset($node->private) ? $node->private : 0,
    'profile_picture' => isset($node->profile_picture) ? $node->profile_picture : '',
    'imagecache_preset' => isset($node->imagecache_preset) ? $node->imagecache_preset : '',
  );
  drupal_write_record('chatroom_chat', $chat);
  chatroom_chat_update_cache($node->nid, 0);
}
*/
/**
 * Implements hook_delete().
 */
/* Code for deleting chat messages.
function chatroom_chat_delete(&$node) {
  cache_clear_all('chatroom_chat_list', 'cache');
  db_query('DELETE FROM {chatroom_chat} WHERE nid = :nid', array(':nid' => $node->nid));
  db_query('DELETE FROM {chatroom_chat_online_list} WHERE ccid = :ccid', array(':ccid' => $node->nid));
  db_query('DELETE FROM {chatroom_chat_ban_list} WHERE nid = :nid', array(':nid' => $node->nid));
  db_query('DELETE FROM {chatroom_chat_kicked_list} WHERE nid = :nid', array(':nid' => $node->nid));
  $cache_file = file_directory_temp() . '/chatroom.chat.' . $node->nid . '.cache';
  unlink($cache_file);
}
*/
/**
 * Implements hook_load().
 */
/* Code for loading chat messages.
function chatroom_chat_load($nodes) {
  $result = db_query("SELECT * FROM {chatroom_chat} WHERE nid IN (:nids)", array(':nids' => array_keys($nodes)));
  foreach ($result as $chat) {
    $chat->chatroom = $chat->crid ? node_load($chat->crid) : FALSE;
    $chat->latest_msg = chatroom_chat_get_latest_message($chat->nid);
    $chat->msg_count = chatroom_chat_get_message_count($chat->nid);
    $chat->banned_list = chatroom_chat_get_banned_list($chat);
    $chat->kicked_list = chatroom_chat_get_kicked_list($chat);
    if ($chat->private) {
      $chat->allowed_uids = chatroom_chat_load_allowed_uids($chat);
    }
    $nodes[$chat->nid]->chat = $chat;
  }
}
*/
/**
 * Get the latest message id for a given chat.
 *
 * @param mixed $ccid
 */
function simplechat_chat_get_latest_message($ccid) {
  $sql = "SELECT cm.*, u.name
          FROM {chatroom_msg} cm
          INNER JOIN {users} u ON u.uid = cm.uid
          WHERE ccid = :ccid
          ORDER BY cmid
          DESC LIMIT 1";
  return db_query($sql, array(':ccid' => $ccid))->fetchObject();
}

/**
 * Get the message count for a chat.
 */
function simplechat_chat_get_message_count($ccid) {
  $sql = 'SELECT COUNT(*) FROM {chatroom_msg} WHERE ccid = :ccid';
  return db_query($sql, array(':ccid' => $ccid))->fetchField();
}

/**
 * Implements hook_view().
 */
/* View listing of chat
function chatroom_chat_view($node, $view_mode) {
  global $user;

  if ($view_mode == 'full' && node_is_page($node)) {

    if (chatroom_chat_is_banned_user($user, $node)) {
      drupal_goto("chatroom/access-denied/$node->nid/banned");
    }
    else if (chatroom_chat_is_kicked_user($user, $node)) {
      drupal_goto("chatroom/access-denied/$node->nid/kicked");
    }

    drupal_add_css(drupal_get_path('module', 'chatroom') .'/chatroom.css');

    $bc = drupal_get_breadcrumb();
    if ($node->chat->chatroom) {
      $bc[] = l($node->chat->chatroom->title, "node/{$node->chat->chatroom->nid}");
    }
    $bc[] = l($node->title, "node/$node->nid");
    drupal_set_breadcrumb($bc);

    if (!isset($node->chat->when_archived)) {
      if (chatroom_max_users_reached($node)) {
        $content = theme('chatroom_chat_max_users', array('node' => $node));
      }
      else {
        if (!chatroom_chat_register_user($node)) {
          chatroom_update_last_seen_time($node, session_id());
          // from chatroom_node.js module
          $nodejs_message = (object) array(
            'channel' => 'chatroom_chat_' . $node->nid,
            'broadcast' => FALSE,
            'type' => 'userSeen',
            'callback' => 'chatroomNodejsMessageHandler',
            'data' => theme('chatroom_user_list', array('users' => chatroom_load_online_users($node), 'node' => $node)),
          );
          nodejs_send_message($nodejs_message);
          // -- 
          module_invoke_all('chatroom_chat_user_seen', $user, $node);
        }
        $node->chat->users = chatroom_load_online_users($node);
        chatroom_add_js($node);
        $node->chat->latest_messages = array();
        foreach (chatroom_chat_load_latest_messages($node) as $message) {
          if ($message->msg_type == 'private_message' && $user->uid != $message->recipient_uid) {
            continue;
          }
          $node->chat->latest_messages[] = $message;
        }
        $content = theme('chatroom_chat', array('node' => $node));
      }
    }
    else {
      $content = theme('chatroom_chat_archive', array('node' => $node));
      if (user_access('administer chat rooms')) {
        $content .= drupal_render(drupal_get_form('chatroom_unarchive_chat_form', $node));
      }
    }
    $node->content['chatroom_chat_interface'] = array('#markup' => $content);
  }
  else {
    $node->content['teaser'] = array('#markup' => theme('chatroom_chat_teaser', array('node' => $node)));
  }
  return $node;
}
*/
/**
 * Get messages for a given chat.
 *
 * @param $chat_id
 *   The chat id.
 * @param $last_cmid
 *   Only load messages with cmids greater than this value.
 * @param $limit
 *   Default: FALSE.
 * @return array $messages
*/
function simplechat_chat_load_messages($chat_id, $last_cmid = 0, $limit = FALSE) {
  $sql = "SELECT cm.*, u.name, 0 AS guest_id
          FROM {simplechat_msg} cm
          INNER JOIN {users} u ON u.uid = cm.uid
          WHERE cm.ccid = :ccid
          AND cm.cmid > :cmid
          ORDER BY cm.cmid ASC";
  $args = array(':ccid' => $chat_id, ':cmid' => $last_cmid);
  if ($limit) {
    $sql .= ' LIMIT :limit';
    $args[':limit'] = $limit;
  }
  return simplechat_chat_load_messages_helper($sql, $args);
}

/**
 * Load the latest messages from a chat.
 *
 * @param mixed $node
 * @return array
 */
function simplechat_chat_load_latest_messages($node) {
  if (preg_match('/^\d+$/', $node->chat->previous_messages_display_count)) {
    $limit = $node->chat->previous_messages_display_count;
  }
  else {
    $limit = 10;
  }
  $sql = "SELECT cm.*, u.name, 0 AS guest_id
          FROM {simplechat_msg} cm
          INNER JOIN {users} u ON u.uid = cm.uid
          WHERE cm.ccid = :ccid 
          ORDER BY cm.cmid DESC
          LIMIT $limit";
  $messages = simplechat_chat_load_messages_helper($sql, array(':ccid' => $node->nid));
  return array_reverse($messages, TRUE);
}

/**
 * Helper function to load messages.
 *
 * @param mixed $sql
 * @param mixed $args
 * @return array
 */
function simplechat_chat_load_messages_helper($sql, $args) {
  $messages = array();
  $guest_sids = array();
  $guest_prefix = variable_get('simplechat_guest_user_prefix', t('guest-'));
  $allow_anon_names = variable_get('simplechat_allow_anon_name', TRUE);

  $result = db_query($sql, $args)->fetchAll(PDO::FETCH_OBJ);
  foreach ($result as $message) {
    if ($message->uid == 0 && !in_array($message->sid, $guest_sids)) {
      $guest_sids[] = $message->sid;
    }
    $messages[$message->cmid] = $message;
  }

  if (!empty($guest_sids)) {
    $result = db_select('simplechat_chat_online_list')
      ->fields('sid')
      ->fields('guest_id')
      ->condition('sid', $guest_sids, 'IN')
      ->execute()
      ->fetchAll(PDO::FETCH_OBJ);
    foreach ($result as $guest) {
      foreach ($messages as $message) {
        if ($message->sid == $guest->sid) {
          if ($message->anon_name && $allow_anon_names) {
            $messages[$message->cmid]->name = $message->anon_name . ' <span class="anon-label">(' . $guest_prefix . $guest->guest_id . ')</span>';
          }
          else {
            $messages[$message->cmid]->name = $guest_prefix . $guest->guest_id;
          }
          $messages[$message->cmid]->guest_id = $guest->guest_id;
        }
      }
    }
  }
  return $messages;
}

/**
 * Load a simplechat message from it's $cmid
 * 
 * @param mixed $cmid
 * @return mixed
 */
function simplechat_chat_load_message($cmid) {
  $guest_prefix = variable_get('simplechat_guest_user_prefix', t('guest-'));
  $allow_anon_names = variable_get('simplechat_allow_anon_name', TRUE);

  $sql = "SELECT cm.*, u.name
          FROM {simplechat_msg} cm
          INNER JOIN {users} u ON u.uid = cm.uid
          WHERE cm.cmid = :cmid";
  if ($message = db_query($sql, array(':cmid' => $cmid))->fetchObject()) {
    $message->guest_id = 0;
    if ($message->uid == 0) {
      $sql = 'SELECT * FROM {simplechat_chat_online_list} WHERE sid = :sid';
      $guest = db_query($sql, array(':sid' => $message->sid))->fetchObject();
      if ($message->anon_name && $allow_anon_names) {
        $message->name = $message->anon_name . ' <span class="anon-label">(' . $guest_prefix . $guest->guest_id . ')</span>';
      }
      else {
        $message->name = $guest_prefix . $guest->guest_id;
      }
      $message->guest_id = $guest->guest_id;
    }
  }
  return $message;
}

/**
 * Prepare a message to be sent down to a client.
 *
 * @param mixed $message 
 * @return stdClass $msg
 */
function simplechat_chat_prepare_message($message, $node) {
  global $user;

  $msg = new StdClass();
  $msg->html = simplechat_chat_get_themed_message($message, $node);
  $msg->text = strip_tags($message->msg);
  $msg->name = $message->name;
  $msg->name_stripped = strip_tags($message->name);
  $msg->cmid = $message->cmid;
  $msg->type = $message->msg_type;
  $msg->uid = $message->uid;
  $msg->modified = $message->modified;
  $msg->date_format = variable_get('simplechat_msg_date_format', 'H:i:s');
  $msg->public_css_class = variable_get('simplechat_msg_public_class', 'simplechat-msg');
  $msg->private_css_class = variable_get('simplechat_msg_private_class', 'simplechat-private');
  $msg->themed_username = theme('simplechat_message_username', array('message' => $message, 'skip_permission_check' => TRUE));
  $msg->themed_message = theme('simplechat_message', array('message' => $message, 'node' => $node));
  $msg->recipient_uid = $message->recipient_uid;
  $msg->viewed_uid = $user->uid;
  return $msg;
}

/**
 * Wrapper around theme('simplechat_message').
 *
 * @param mixed $message
 * @param mixed $node
 */
function simplechat_chat_get_themed_message($message, $node) {
  global $user;

  if ($message->uid && user_access('access user profiles')) {
    $username = theme('simplechat_message_username', array('message' => $message, 'skip_permission_check' => FALSE));
  }
  else {
    $username = $message->name;
  }
  $public_css_class = variable_get('simplechat_msg_public_class', 'simplechat-msg');
  $private_css_class = variable_get('simplechat_msg_private_class', 'simplechat-private');
  $class = "new-message $public_css_class" . ($message->msg_type == 'private_message' ? " $private_css_class" : '');
  $output = '<div class="' . $class . '">';
  $output .= '(' . simplechat_get_message_time_string($message->modified) . ') <strong>' . $username . ':</strong> ';
  $output .= theme('simplechat_message', array('message' => $message, 'node' => $node));
  $output .= "</div>";
  return $output;
}

/**
 * Get the time string for a message from a UTC timestamp.
 *
 * @param mixed $timestamp
 * @return string
 */
function simplechat_get_message_time_string($timestamp) {
  $offset_in_hours = simplechat_get_user_timezone_offset() / 60 / 60;
  $offset_in_hours = $offset_in_hours >= 0 ? '+' . $offset_in_hours : $offset_in_hours;
  $date = new DateTime('@' . ($timestamp + simplechat_get_user_timezone_offset()), new DateTimeZone('Etc/GMT' . $offset_in_hours));
  return $date->format(variable_get('simplechat_msg_date_format', 'H:i:s'));
}

/**
 * Return a UTC timestamp.
 *
 * @return int timestamp
 */
function simplechat_get_utc_timestamp() {
  $date = new DateTime('now', new DateTimeZone('UTC'));
  return $date->format('U');
}

/**
 * Posted messages are handled here.
 *
 * @return boolean
 */
function simplechat_check_token($token, $form_id) {
  return $token == drupal_get_token($form_id);
}

/**
 * Posted messages are handled here.
 *
 * @return void
 */
function simplechat_chat_post_message($node, $last_msg_id) {
  global $user;

  // Check we have a message posted.
  if (!isset($_POST['message'])) {
    exit;
  }

  if (!simplechat_check_token($_POST['formToken'], $_POST['formId'])) {
    exit;
  }

  $message = array(
    'ccid' => $node->chat->nid,
    'uid' => $user->uid,
    'msg' => $_POST['message'],
    'sid' => session_id(),
    'msg_type' => simplechat_chat_get_message_type($_POST['message']),
    'recipient_uid' => 0,
    'modified' => simplechat_get_utc_timestamp(),
    'anon_name' => isset($_POST['anonName']) ? $_POST['anonName'] : '',
  );
  if ($message['msg_type'] == 'command') {
    $result = simplechat_chat_call_command($message, $node);
  }
  else {
    $result = simplechat_chat_save_message($message, $node);
  }
}

/**
 * Return the current user's offset from UTC.
 */
function simplechat_get_user_timezone_offset() {
  global $user;

  $offset = variable_get('date_default_timezone', 0);
  if (variable_get('configurable_timezones', TRUE) && isset($user->timezone)) {
    $offset = $user->timezone;
  }
  return $offset;
}

/**
 * Write a message into a chat, and allow any interested modules to react.
 *
 * @param array $message
 * @param StdClass $node
 * @return boolean
 */
function simplechat_chat_save_message($message, $node) {
  drupal_alter('simplechat_chat_msg', $message);
  if (drupal_write_record('simplechat_msg', $message)) {
    $node->chat->latest_msg_id = $message['cmid'];
    // from chatroom_node.js module
    global $user;
    $nodejs_message = (object) array(
                    'channel' => 'simplechat_' . $node->nid,
                    'broadcast' => FALSE,
                    'type' => 'newMessage',
                    'callback' => 'simplechatNodejsMessageHandler',
                    'data' => simplechat_chat_prepare_message(simplechat_chat_load_message($message['cmid']), $node),
    );
    nodejs_send_message($nodejs_message);
    nodejs_add_user_to_channel($user->uid, 'simplechat_' . $node->nid);
    // --
    foreach (module_implements('chat_msg_saved') as $module) {
      $function = $module . '_chat_msg_saved';
      $function($message, $node);
    }
    return $message['cmid'];
  }
  return FALSE;
}

/**
 * Unarchive old chat.
 *
 * @param mixed $node
 * @return boolean
 */
function simplechat_chat_unarchive_chat($node) {
  cache_clear_all('simplechat_chat_list', 'cache');
  return db_update('simplechat_chat')
    ->fields(array('when_archived' => NULL))
    ->condition('nid', $node->nid)
    ->execute();
}

/**
 * Archive a chat.
 *
 * @param mixed $node
 * @return boolean
 */
function simplechat_chat_archive_chat($node) {
  cache_clear_all('simplechat_chat_list', 'cache');
  return db_update('simplechat_chat')
    ->fields(array('when_archived' => time()))
    ->condition('nid', $node->nid)
    ->execute();
}
/**
 * Move old messages to archive.
 */
function simplechat_archive_old_msgs($chat_id) {
  db_query("UPDATE {simplechat_msg} set archived = 1 WHERE ccid = %d", $chat_id);
}
